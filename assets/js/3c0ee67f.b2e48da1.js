"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[4462],{4380:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var r=o(4848),i=o(8453);const n={title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 2",tags:["monad","Rust","Sui"],authors:[]},a=void 0,s={permalink:"/blog/2024/10/14/verification-move-sui-type-checker-2",source:"@site/blog/2024-10-14-verification-move-sui-type-checker-2.md",title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 2",description:"We are working on formally verifying the \ud83e\udd80&nbsp;Rust implementation of the Move type-checker for bytecode in the proof system \ud83d\udc13&nbsp;Coq. You can find the code of this type-checker in the crate move-bytecode-verifier.",date:"2024-10-14T00:00:00.000Z",formattedDate:"October 14, 2024",tags:[{label:"monad",permalink:"/blog/tags/monad"},{label:"Rust",permalink:"/blog/tags/rust"},{label:"Sui",permalink:"/blog/tags/sui"}],readingTime:9.045,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 2",tags:["monad","Rust","Sui"],authors:[]},unlisted:!1,prevItem:{title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 3",permalink:"/blog/2024/10/15/verification-move-sui-type-checker-3"},nextItem:{title:"\ud83c\udf32 What we do at Formal Land",permalink:"/blog/2024/10/13/class-what-we-do"}},c={authorsImageUrls:[]},l=[];function h(e){const t={a:"a",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["We are working on formally verifying the ",(0,r.jsx)(t.a,{href:"https://www.rust-lang.org/",children:"\ud83e\udd80\xa0Rust"})," implementation of the ",(0,r.jsx)(t.a,{href:"https://sui.io/move",children:"Move"})," type-checker for bytecode in the proof system ",(0,r.jsx)(t.a,{href:"https://coq.inria.fr/",children:"\ud83d\udc13\xa0Coq"}),". You can find the code of this type-checker in the crate ",(0,r.jsx)(t.a,{href:"https://github.com/move-language/move-sui/tree/main/crates/move-bytecode-verifier",children:"move-bytecode-verifier"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["This requires translating all the Rust code in idiomatic Coq on which we will write our specifications and proofs. We write this translation by hand relying as much as possible on generative AI tools such as ",(0,r.jsx)(t.a,{href:"https://github.com/features/copilot",children:"GitHub Copilot"}),", as there are many particular cases. We plan, eventually, to prove it equivalent to the translation automatically generated by ",(0,r.jsx)(t.a,{href:"https://github.com/formal-land/coq-of-rust",children:"coq-of-rust"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"In this blog post we present how we organize our \ud83d\udd2e\xa0monad to represent the side-effects used in this Rust code. We believe this organization should work for other Rust projects as well."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>s});var r=o(6540);const i={},n=r.createContext(i);function a(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);