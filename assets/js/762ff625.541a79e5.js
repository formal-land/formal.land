"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[4935],{8486:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>h});var n=o(74848),i=o(28453);const r={title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 3",tags:["monad","Rust","Sui"],authors:[]},s=void 0,a={permalink:"/blog/2024/10/15/verification-move-sui-type-checker-3",source:"@site/blog/2024-10-15-verification-move-sui-type-checker-3.md",title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 3",description:"In the previous blog post, we have seen how we represent side-effects from the Rust code of the Sui's Move type-checker of bytecode in Coq. This translation represents about 3,200 lines of Coq code excluding comments. We need to trust that this translation is faithful to the original Rust code, as we generate it by hand or with GitHub Copilot.",date:"2024-10-15T00:00:00.000Z",formattedDate:"October 15, 2024",tags:[{label:"monad",permalink:"/blog/tags/monad"},{label:"Rust",permalink:"/blog/tags/rust"},{label:"Sui",permalink:"/blog/tags/sui"}],readingTime:5.795,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 3",tags:["monad","Rust","Sui"],authors:[]},unlisted:!1,prevItem:{title:"\ud83e\ude81 Enhancements to coq-of-solidity \u2013 1",permalink:"/blog/2024/10/16/coq-of-solidity-enhanced-version-1"},nextItem:{title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 2",permalink:"/blog/2024/10/14/verification-move-sui-type-checker-2"}},c={authorsImageUrls:[]},h=[];function l(e){const t={a:"a",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["In the ",(0,n.jsx)(t.a,{href:"/blog/2024/10/14/verification-move-sui-type-checker-2",children:"previous blog post"}),", we have seen how we represent side-effects from the Rust code of the ",(0,n.jsx)(t.a,{href:"https://sui.io/",children:"Sui"}),"'s ",(0,n.jsx)(t.a,{href:"https://sui.io/move",children:"Move"})," type-checker of bytecode in Coq. This translation represents about 3,200 lines of Coq code excluding comments. We need to trust that this translation is faithful to the original Rust code, as we generate it by hand or with GitHub Copilot."]}),"\n",(0,n.jsx)(t.p,{children:"In this blog post, we present how we test this translation to ensure it is correct by running the type-checker on each opcode of the Move bytecode and comparing the results with the Rust code, testing the success and error cases."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>a});var n=o(96540);const i={},r=n.createContext(i);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);