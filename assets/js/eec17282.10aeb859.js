"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[5712],{723:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=i(4848),n=i(8453);const r={title:"\u2688 Verification of the Smoo.th library \u2013 1",tags:["Solidity","Yul","elliptic curves"],authors:[]},s=void 0,a={permalink:"/blog/2024/10/21/verification-smooth-library-1",source:"@site/blog/2024-10-21-verification-smooth-library-1.md",title:"\u2688 Verification of the Smoo.th library \u2013 1",description:"In this blog post, we present the formal verification effort we started to show the absence of bugs in the \u2688&nbsp;Smoo.th library, a library for optimized \u3030\ufe0f&nbsp;elliptic curve operations in Solidity. We are using our tool coq-of-solidity to make this non-trivial verification using the generic proof assistant \ud83d\udc13&nbsp;Coq.",date:"2024-10-21T00:00:00.000Z",formattedDate:"October 21, 2024",tags:[{label:"Solidity",permalink:"/blog/tags/solidity"},{label:"Yul",permalink:"/blog/tags/yul"},{label:"elliptic curves",permalink:"/blog/tags/elliptic-curves"}],readingTime:10.45,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\u2688 Verification of the Smoo.th library \u2013 1",tags:["Solidity","Yul","elliptic curves"],authors:[]},unlisted:!1,prevItem:{title:"\ud83c\udf32 What we bring you",permalink:"/blog/2024/10/22/what-we-bring-to-you"},nextItem:{title:"\ud83e\ude81 Enhancements to coq-of-solidity \u2013 1",permalink:"/blog/2024/10/16/coq-of-solidity-enhanced-version-1"}},l={authorsImageUrls:[]},c=[];function h(t){const e={a:"a",p:"p",strong:"strong",...(0,n.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["In this blog post, we present the formal verification effort we started to show the absence of bugs in the ",(0,o.jsx)(e.a,{href:"https://smoo.th/",children:"\u2688\xa0Smoo.th"})," library, a library for optimized ",(0,o.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Elliptic_curve",children:"\u3030\ufe0f\xa0elliptic curve"})," operations in ",(0,o.jsx)(e.a,{href:"https://soliditylang.org/",children:"Solidity"}),". We are using our tool ",(0,o.jsx)(e.a,{href:"https://github.com/formal-land/coq-of-solidity",children:"coq-of-solidity"})," to make this non-trivial verification using the generic proof assistant ",(0,o.jsx)(e.a,{href:"https://coq.inria.fr/",children:"\ud83d\udc13\xa0Coq"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.strong,{children:"Smoo.th"})," library is interesting as elliptic curves are at the core of many cryptographic protocols, including authentication protocols, and having a generic and fast implementation simplifies the development of ",(0,o.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Decentralized_application",children:"dApps"})," in environments with missing pre-compiled (like L1s) or missing circuits (like zero-knowledge layers)."]}),"\n",(0,o.jsxs)(e.p,{children:["From a verification point of view, it is very challenging as it combines low-level operations (hand-optimized ",(0,o.jsx)(e.a,{href:"https://docs.soliditylang.org/en/latest/yul.html",children:"Yul"})," code with bit shifts, inlined functions, ...) with higher-level reasoning on elliptic curves and arithmetic\xa0\ud83d\udcaa."]})]})}function p(t={}){const{wrapper:e}={...(0,n.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(h,{...t})}):h(t)}},8453:(t,e,i)=>{i.d(e,{R:()=>s,x:()=>a});var o=i(6540);const n={},r=o.createContext(n);function s(t){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:s(t.components),o.createElement(r.Provider,{value:e},t.children)}}}]);