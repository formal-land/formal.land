"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[4412],{76689:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var n=o(74848),i=o(28453);const s={title:"\ud83e\udd16 Annotating what we are doing for an LLM to pick up",tags:["llm","ai"],authors:[]},r=void 0,a={permalink:"/blog/2025/01/06/annotating-what-we-are-doing",source:"@site/blog/2025-01-06-annotating-what-we-are-doing.md",title:"\ud83e\udd16 Annotating what we are doing for an LLM to pick up",description:"We want to write a series of blog posts about our efforts to use LLMs to formally verify code faster with the &nbsp;Rocq/Coq theorem prover. Here, we present an experiment consisting of writing all that we are doing so that we can document our reasoning and help LLMs to pick up human techniques.",date:"2025-01-06T00:00:00.000Z",formattedDate:"January 6, 2025",tags:[{label:"llm",permalink:"/blog/tags/llm"},{label:"ai",permalink:"/blog/tags/ai"}],readingTime:3.795,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\udd16 Annotating what we are doing for an LLM to pick up",tags:["llm","ai"],authors:[]},unlisted:!1,prevItem:{title:"\ud83e\udd80 Verification of one instruction of the Move's type-checker",permalink:"/blog/2025/01/13/verification-one-instruction-sui"},nextItem:{title:"\ud83e\udd84 Mutually recursive functions with notation",permalink:"/blog/2024/12/26/mutually-recursive-functions-with-notation"}},c={authorsImageUrls:[]},h=[{value:"\ud83d\udd0d Example",id:"-example",level:2},{value:"\ud83d\udc06 Quick takeaways",id:"-quick-takeaways",level:2},{value:"\u2712\ufe0f Conclusion",id:"\ufe0f-conclusion",level:2}];function l(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["We want to write a series of blog posts about our efforts to use LLMs to formally verify code faster with the ",(0,n.jsxs)(t.a,{href:"https://rocq-prover.org/",children:[(0,n.jsx)("img",{src:"https://raw.githubusercontent.com/coq/rocq-prover.org/refs/heads/main/rocq-id/logos/SVG/icon-rocq-orange.svg",height:"18px"}),"\xa0Rocq/Coq"]})," theorem prover. Here, we present an experiment consisting of writing all that we are doing so that we can document our reasoning and help LLMs to pick up human techniques."]}),"\n",(0,n.jsx)(t.p,{children:'According to many publications about using generative AI to help formal verification, it is almost impossible to find a proof in "one shot". So, one certainly has to interact with the system, maybe by following the human way. Here we aim to document this "human way" of writing proofs.'}),"\n",(0,n.jsxs)(t.admonition,{title:"Ask for the highest security!",type:"success",children:[(0,n.jsx)(t.p,{children:"How do you ensure your security audits are exhaustive?"}),(0,n.jsx)(t.p,{children:"When millions are at stake, bug bounties are not enough."}),(0,n.jsxs)(t.p,{children:["The only way to do this is to use ",(0,n.jsx)(t.strong,{children:"formal verification"})," to ",(0,n.jsx)(t.em,{children:"prove"})," your code is correct."]}),(0,n.jsxs)(t.p,{children:["This is what we provide as a service. ",(0,n.jsx)(t.strong,{children:"Contact us"})," at\xa0",(0,n.jsx)(t.a,{href:"mailto:contact@formal.land",children:"\xa0\ud83d\udc8ccontact@formal.land"})," to ensure your code is safe!\xa0\ud83d\ude80"]}),(0,n.jsxs)(t.p,{children:["We cover ",(0,n.jsx)(t.strong,{children:"Rust"}),", ",(0,n.jsx)(t.strong,{children:"Solidity"}),", and soon ",(0,n.jsx)(t.strong,{children:"zk circuits"}),"."]})]}),"\n",(0,n.jsx)("figure",{children:(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Robot",src:o(79901).A+"",width:"1024",height:"1024"})})}),"\n",(0,n.jsx)(t.h2,{id:"-example",children:"\ud83d\udd0d Example"}),"\n",(0,n.jsxs)(t.p,{children:["We take as an example our verification effort for the type-checker of the Move language. We have a big lemma to verify with 77 cases, one per Move instruction. We now write everything we do in a single linear document ",(0,n.jsx)(t.a,{href:"https://github.com/formal-land/coq-of-rust/blob/main/CoqOfRust/what_we_do.md",children:"what_we_do.md"}),". Here is an extract:"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"Now a previous case is failing:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"hauto l: on.\n"})}),"\n",(0,n.jsx)(t.p,{children:"with:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"Error: hauto failed\n"})}),"\n",(0,n.jsxs)(t.p,{children:["As this is a tactic generated by ",(0,n.jsx)(t.code,{children:"best"}),", we try to use ",(0,n.jsx)(t.code,{children:"best"})," again. It works! We continue and arrive at our current goal. Out of curiosity, we try ",(0,n.jsx)(t.code,{children:"best"})," again. It works! The idea is that since we made weaker the definition of what we want to prove, maybe we can now solve it automatically."]}),"\n",(0,n.jsxs)(t.p,{children:["We have six cases which are solved by ",(0,n.jsx)(t.code,{children:"best"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"{ best. }\n{ best. }\n{ best. }\n{ best. }\n{ best. }\n{ best. }\n"})}),"\n",(0,n.jsxs)(t.p,{children:["We replace it by ",(0,n.jsx)(t.code,{children:"; best"})," after the block of previous tactics:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"step; cbn; (try easy); (try now destruct operand_ty);\n repeat (step; cbn; try easy);\n constructor; cbn; try assumption;\n best.\n"})}),"\n",(0,n.jsxs)(t.p,{children:["It works! By running ",(0,n.jsx)(t.code,{children:"make"})," again we get that we can replace the ",(0,n.jsx)(t.code,{children:"best"})," by `"]}),"\n",(0,n.jsxs)(t.p,{children:["So now we have done the ",(0,n.jsx)(t.code,{children:"Bytecode.CastU8"})," case."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"We document both our successes and failures, as this is what we do when we interact with the system to try to find the proof of a property."}),"\n",(0,n.jsx)(t.h2,{id:"-quick-takeaways",children:"\ud83d\udc06 Quick takeaways"}),"\n",(0,n.jsx)(t.p,{children:"This is time-consuming. Hopefully, this pays off in the long run. There may be a way to automatically record what we are doing, by recording the user interactions in a VSCode plugin. In addition, when writing what we do by hand we might forget to write some important steps but seemingly obvious steps, like checking into another file, due to laziness."}),"\n",(0,n.jsx)(t.p,{children:'The autocomplete from GitHub Copilot, while writing the document, already generated the right steps to do from the journal we are writing, like "compile the project again" or a good tactic to try.'}),"\n",(0,n.jsx)(t.p,{children:"We realize that we have a lot to write in consolidated documents and that a lot of what we do are coding conventions we have taken. These might not be the ones used by everyone, so we have to distinguish between our conventions and general Rocq knowledge."}),"\n",(0,n.jsx)(t.p,{children:"There is a lot of domain-specific knowledge that only a human can provide and that is specific to each project. For example, here, a human has to give hints related to how the Move type-checker is implemented, which can only be understood by reading the source code."}),"\n",(0,n.jsx)(t.p,{children:"Here we try to give some sense of mid-level intuitions: how to navigate the project, go to a definition, add a new property, ... We do not focus too much on the details of the tactics to use (more low-level), or the high-level intuition behind the proof which might be better done by a human."}),"\n",(0,n.jsx)(t.p,{children:"This helps to understand how an LLM thinks and which information it has access to."}),"\n",(0,n.jsx)(t.h2,{id:"\ufe0f-conclusion",children:"\u2712\ufe0f Conclusion"}),"\n",(0,n.jsx)(t.p,{children:"We have quickly presented the idea of writing what we are doing along the way to help LLMs understand how to verify some code."}),"\n",(0,n.jsx)(t.p,{children:"Please tell us what you think or if you have some ideas for improving this process!"}),"\n",(0,n.jsx)(t.admonition,{title:"For more",type:"success",children:(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.em,{children:["Follow us on ",(0,n.jsx)(t.a,{href:"https://x.com/FormalLand",children:"X"})," or ",(0,n.jsx)(t.a,{href:"https://fr.linkedin.com/company/formal-land",children:"LinkedIn"})," for more, or comment on this post below! Feel free to DM us for any questions or requests!"]})})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},79901:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/robot-forest-f7370f18c8ef9dd0c0d6bdb53c64d96c.webp"},28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var n=o(96540);const i={},s=n.createContext(i);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);