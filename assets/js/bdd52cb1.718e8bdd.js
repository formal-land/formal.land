"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[4566],{3160:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});var r=o(4848),a=o(8453);const i={title:"\ud83c\udf32 What we do at Formal Land",tags:["security","formal verification","interactive theorem proving","Rust","Solidity"],authors:[]},s=void 0,n={permalink:"/blog/2024/10/13/class-what-we-do",source:"@site/blog/2024-10-13-class-what-we-do.md",title:"\ud83c\udf32 What we do at Formal Land",description:"In this blog post, we present what we do at Formal Land&nbsp;\ud83c\udf32, what tools and services we are developing to provide more security for our customers&nbsp;\ud83e\uddb8. We believe that for critical applications such as blockchains (L1, L2, dApps) you should always use the most advanced technologies to find bugs, otherwise bad actors will do and overtake you in the never-ending race for security&nbsp;\ud83c\udfce\ufe0f.",date:"2024-10-13T00:00:00.000Z",formattedDate:"October 13, 2024",tags:[{label:"security",permalink:"/blog/tags/security"},{label:"formal verification",permalink:"/blog/tags/formal-verification"},{label:"interactive theorem proving",permalink:"/blog/tags/interactive-theorem-proving"},{label:"Rust",permalink:"/blog/tags/rust"},{label:"Solidity",permalink:"/blog/tags/solidity"}],readingTime:6.75,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83c\udf32 What we do at Formal Land",tags:["security","formal verification","interactive theorem proving","Rust","Solidity"],authors:[]},unlisted:!1,prevItem:{title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 2",permalink:"/blog/2024/10/14/verification-move-sui-type-checker-2"},nextItem:{title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 1",permalink:"/blog/2024/08/19/verification-move-sui-type-checker-1"}},c={authorsImageUrls:[]},l=[];function d(e){const t={a:"a",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["In this blog post, we present what we do at Formal Land\xa0\ud83c\udf32, what tools and services we are developing to provide more security for our customers\xa0\ud83e\uddb8. We believe that for critical applications such as blockchains (L1, L2, dApps) you should always ",(0,r.jsx)(t.strong,{children:"use the most advanced technologies to find bugs, otherwise bad actors will do"})," and overtake you in the never-ending race for security\xa0\ud83c\udfce\ufe0f."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Formal verification"})," is one of the best techniques to ensure that your code is correct, as it ",(0,r.jsx)(t.strong,{children:"checks every possible input\xa0\u2728"})," of your program. For a long, formal verification was reserved for specific fields, such as the space industry\xa0\ud83e\uddd1\u200d\ud83d\ude80. We are making this technology accessible for the blockchain industry and general programming thanks to tools and services we develop, like ",(0,r.jsx)(t.a,{href:"https://github.com/formal-land/coq-of-solidity",children:"coq-of-solidity"})," and ",(0,r.jsx)(t.a,{href:"https://github.com/formal-land/coq-of-rust",children:"coq-of-rust"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>n});var r=o(6540);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);