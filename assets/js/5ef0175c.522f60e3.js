"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[9835],{34035:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var s=o(74848),n=o(28453),r=o(28774);const i={id:"introduction",title:"\ud83e\udd80 coq-of-rust"},c=void 0,l={id:"tools/coq-of-rust/introduction",title:"\ud83e\udd80 coq-of-rust",description:"This project was funded by the Aleph Zero Foundation.",source:"@site/docs/tools/coq-of-rust/introduction.md",sourceDirName:"tools/coq-of-rust",slug:"/tools/coq-of-rust/introduction",permalink:"/docs/tools/coq-of-rust/introduction",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"introduction",title:"\ud83e\udd80 coq-of-rust"},sidebar:"sidebar",previous:{title:"Faq",permalink:"/docs/tools/coq-of-ocaml/more/faq"},next:{title:"Revm Project",permalink:"/docs/tools/coq-of-rust/revm-project"}},a={},h=[{value:"How it works",id:"how-it-works",level:2},{value:"Example",id:"example",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Workflow",id:"workflow",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["This project was funded by the ",(0,s.jsx)(t.a,{href:"https://alephzero.org/",children:"Aleph Zero Foundation"}),"."]})}),"\n",(0,s.jsxs)(t.p,{children:["Our Rust analyzer ",(0,s.jsx)(t.a,{href:"https://github.com/formal-land/coq-of-rust",children:(0,s.jsx)(t.strong,{children:"coq-of-rust"})})," provides:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.strong,{children:"highest level of security\xa0\ud83d\udee1\ufe0f"})," for your Rust programs by ",(0,s.jsx)(t.strong,{children:"checking all possible user inputs\xa0\ud83d\udd0d"})," (formal verification)."]}),"\n",(0,s.jsxs)(t.li,{children:["A verification of ",(0,s.jsx)(t.strong,{children:"any kinds of security properties\xa0\ud83d\udc6e"})," (interactive prover)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Reusable proofs\xa0\ud83d\udd01"})," you can re-run as the code evolves, eliminating the need of costly manual code audits."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["This is better than testing that might miss some edge cases. In fact, ",(0,s.jsx)(t.strong,{children:"we always find all the bugs!"}),(0,s.jsx)(t.sup,{children:(0,s.jsx)(t.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]}),"\n",(0,s.jsxs)(t.admonition,{title:"Service",type:"tip",children:[(0,s.jsxs)(t.p,{children:["We apply ",(0,s.jsx)(t.code,{children:"coq-of-rust"})," to ",(0,s.jsx)(t.strong,{children:"formally verify your Rust programs"}),", writing the specifications and proofs of correctness. See ",(0,s.jsx)(t.a,{href:"/blog/2024/08/19/verification-move-sui-type-checker-1",children:"our project for Sui"})," as a reference."]}),(0,s.jsxs)(t.p,{children:["This is the ",(0,s.jsx)(t.strong,{children:"highest level of security\xa0\ud83d\udcab"})," and this is ",(0,s.jsx)(t.strong,{children:"accessible now"}),". This is the strongest way to protect your code even against state-level attackers\xa0\ud83e\uddb8 since this is maths-backed, like encryption protects your data."]}),(0,s.jsx)(r.A,{className:"button button--secondary button--lg custom-not-underlined",href:"mailto:contact@formal.land",children:(0,s.jsx)("span",{children:"\ud83e\uddb8\xa0Contact us!\xa0"})})]}),"\n",(0,s.jsx)(t.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,s.jsxs)(t.p,{children:["It converts Rust programs to the ",(0,s.jsx)(t.a,{href:"https://rocq-prover.org/",children:"\ud83d\udc13\xa0Rocq"})," proof system. You access the source on ",(0,s.jsx)(t.a,{href:"https://github.com/formal-land/coq-of-rust",children:"GitHub"}),". ",(0,s.jsx)(t.code,{children:"coq-of-rust"})," generates a ",(0,s.jsx)(t.a,{href:"https://cstheory.stackexchange.com/questions/1370/shallow-versus-deep-embeddings",children:"shallow embedding"})," of Rust into Rocq. We run the translation from the ",(0,s.jsx)(t.a,{href:"https://rustc-dev-guide.rust-lang.org/thir.html",children:"THIR"})," level of the Rust compiler. The generated Rocq code is more verbose than the source Rust as we explicit all the low-level details, such as the sequencing of effects or the implicit borrowing/dereferencing."]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"coq-of-rust"})," translates the Rust code from ",(0,s.jsx)(t.a,{href:"https://github.com/bluealloy/revm",children:"Revm"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"pub const fn limit(&self) -> u64 {\n    self.limit\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"to the Rocq code:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-coq",children:'(* Generated by coq-of-rust *)\nDefinition limit (\u03b5 : list Value.t) (\u03c4 : list Ty.t) (\u03b1 : list Value.t) : M :=\n  match \u03b5, \u03c4, \u03b1 with\n  | [], [], [ self ] =>\n    ltac:(M.monadic\n      (let self := M.alloc (| self |) in\n      M.read (|\n        M.SubPointer.get_struct_record_field (|\n          M.deref (| M.read (| self |) |),\n          "revm_interpreter::gas::Gas",\n          "limit"\n        |)\n      |)))\n  | _, _, _ => M.impossible "wrong number of arguments"\n  end.\n'})}),"\n",(0,s.jsxs)(t.p,{children:["We can see that the generated code if more verbose. The good news is that a large subset of Rust can be translated, including most of the standard library (",(0,s.jsx)(t.code,{children:"alloc"})," and ",(0,s.jsx)(t.code,{children:"core"}),"). The difficulty is in reasoning about such translated code. We work hard to develop automations and strategies to make this process easier."]}),"\n",(0,s.jsx)(t.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,s.jsxs)(t.p,{children:["To install ",(0,s.jsx)(t.code,{children:"coq-of-rust"}),", you need to clone the ",(0,s.jsx)(t.a,{href:"https://github.com/formal-land/coq-of-rust",children:"GitHub repository"})," and to have a working installation of Rust. Then, from the root folder of the project, you can run:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"cargo install --path lib/\n"})}),"\n",(0,s.jsxs)(t.p,{children:["It will install the additional ",(0,s.jsx)(t.code,{children:"cargo coq-of-rust"})," command. Then to translate in Rocq the project of your choice:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"cd my_rust_project/\n# You need to copy the rust-toolchain file to force the right version of Rust\ncp ../coq-of-rust/rust-toolchain ./\ncargo coq-of-rust\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This should generate a bunch of ",(0,s.jsx)(t.code,{children:".v"})," Rocq files, with one file per corresponding Rust file. To compile them, the simplest is to copy them in the ",(0,s.jsx)(t.code,{children:"CoqOfRust/"})," folder of the ",(0,s.jsx)(t.code,{children:"coq-of-rust"})," project and to run from there:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"# Install the Rocq dependencies\nopam repo add coq-released https://coq.inria.fr/opam/released\nopam install . --deps-only\n# Compile the whole project (it takes time)\nmake -j4 # 4 is your number of cores\n"})}),"\n",(0,s.jsx)(t.p,{children:"For robustness, the files are not dependent for compilation, so that one translation failure does not block you."}),"\n",(0,s.jsx)(t.h2,{id:"workflow",children:"Workflow"}),"\n",(0,s.jsxs)(t.p,{children:["To formally verify a Rust project using ",(0,s.jsx)(t.code,{children:"coq-of-rust"})," we work as follows:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["translate the Rust code to Rocq using ",(0,s.jsx)(t.code,{children:"coq-of-rust"})]}),"\n",(0,s.jsx)(t.li,{children:"define the memory of the program (how the values will be allocated)"}),"\n",(0,s.jsx)(t.li,{children:"write simulation functions for each function of the Rust code, to give a simpler and more functional definition of the code"}),"\n",(0,s.jsx)(t.li,{children:"verify that these simulations are equivalent to the source code"}),"\n",(0,s.jsx)(t.li,{children:"prove properties over these simulations"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["As some of the work is very verbose and repetitive, such as the definition of the simulation functions, but thankfully generative AI tools such as ",(0,s.jsx)(t.a,{href:"https://github.com/features/copilot",children:"Github Copilot"})," are better and better at code generation."]}),"\n",(0,s.jsxs)(t.section,{"data-footnotes":!0,className:"footnotes",children:[(0,s.jsx)(t.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{id:"user-content-fn-1",children:["\n",(0,s.jsxs)(t.p,{children:["What does this mean? We assume given a formal specification of the code that mathematically describes what is supposed to be a bug and what is supposed to be a feature. From the there, the ",(0,s.jsx)(t.a,{href:"https://rocq-prover.org/",children:"Rocq"})," proof system that we use can check that the code is correct with respect to this specification for all possible user inputs. The result is a mathematical proof checked by the computer. Almost any programs can be verified except the proof checker itself, as it would be a paradox. See ",(0,s.jsx)(t.a,{href:"https://users.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf",children:"this paper"})," to see how Rocq was used to make the only C compiler without bugs (well, except on the non formally verified parts). ",(0,s.jsx)(t.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>c});var s=o(96540);const n={},r=s.createContext(n);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);