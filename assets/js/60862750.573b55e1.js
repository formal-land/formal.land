"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[7545],{17537:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=o(74848),n=o(28453);const a={title:"\ud83e\udd80 Example of verification for the Move's checker of Sui",tags:["Rust","Move","Sui","type-checker"],authors:[]},i=void 0,s={permalink:"/blog/2024/11/14/sui-move-checker-abstract-stack",source:"@site/blog/2024-11-14-sui-move-checker-abstract-stack.md",title:"\ud83e\udd80 Example of verification for the Move's checker of Sui",description:"We are continuing our formal verification work for the implementation of the type-checker of the Move language in the \ud83d\udca7&nbsp;Sui blockchain. We verify a manual translation in the proof system \ud83d\udc13&nbsp;Coq of the \ud83e\udd80&nbsp;Rust code of the Move checker as available on GitHub.",date:"2024-11-14T00:00:00.000Z",formattedDate:"November 14, 2024",tags:[{label:"Rust",permalink:"/blog/tags/rust"},{label:"Move",permalink:"/blog/tags/move"},{label:"Sui",permalink:"/blog/tags/sui"},{label:"type-checker",permalink:"/blog/tags/type-checker"}],readingTime:7.74,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\udd80 Example of verification for the Move's checker of Sui",tags:["Rust","Move","Sui","type-checker"],authors:[]},unlisted:!1,prevItem:{title:"\u25fc\ufe0f A formal verification tool for Noir \u2013 2",permalink:"/blog/2024/11/15/tool-for-noir-2"},nextItem:{title:"\u25fc\ufe0f A formal verification tool for Noir \u2013 1",permalink:"/blog/2024/11/01/tool-for-noir-1"}},c={authorsImageUrls:[]},l=[];function h(e){const t={a:"a",code:"code",p:"p",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["We are continuing our formal verification work for the implementation of the type-checker of the ",(0,r.jsx)(t.a,{href:"https://sui.io/move",children:"Move"})," language in the ",(0,r.jsx)(t.a,{href:"https://sui.io/",children:"\ud83d\udca7\xa0Sui"})," blockchain. We verify a manual translation in the proof system ",(0,r.jsx)(t.a,{href:"https://coq.inria.fr/",children:"\ud83d\udc13\xa0Coq"})," of the ",(0,r.jsx)(t.a,{href:"https://www.rust-lang.org/",children:"\ud83e\udd80\xa0Rust"})," code of the Move checker as available on ",(0,r.jsx)(t.a,{href:"https://github.com/move-language/move-sui/tree/main/crates/move-bytecode-verifier",children:"GitHub"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["In this blog post, we present in detail the verification of a particular function ",(0,r.jsx)(t.code,{children:"AbstractStack::pop_eq_n"})," that manipulates \ud83d\udcda\xa0stacks of types to show that it is equivalent to its naive implementation."]}),"\n",(0,r.jsxs)(t.p,{children:["All the code presented here is on our GitHub at ",(0,r.jsx)(t.a,{href:"https://github.com/formal-land/coq-of-rust",children:"github.com/formal-land/coq-of-rust"})," \ud83e\uddd1\u200d\ud83c\udfeb."]})]})}function f(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>s});var r=o(96540);const n={},a=r.createContext(n);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);