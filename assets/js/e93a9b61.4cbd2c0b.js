"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[1079],{3224:(o,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>n,metadata:()=>c,toc:()=>i});var a=t(4848),r=t(8453);const n={title:"\ud83d\udc2b Latest blog posts on our formal verification effort on Tezos",tags:["coq-tezos-of-ocaml","Tezos","coq-of-ocaml"]},s=void 0,c={permalink:"/blog/2022/12/13/latest-blog-posts-on-tezos",source:"@site/blog/2022-12-13-latest-blog-posts-on-tezos.md",title:"\ud83d\udc2b Latest blog posts on our formal verification effort on Tezos",description:"Here we recall some blog articles that we have written since this summer, on the formal verification of the protocol of Tezos. For this project, we are verifying a code base of around 100,000 lines of OCaml code. We automatically convert the OCaml code to the proof system Coq using the converter coq-of-ocaml. We then apply various proof techniques to make sure that the protocol of Tezos does not contain bugs.",date:"2022-12-13T00:00:00.000Z",formattedDate:"December 13, 2022",tags:[{label:"coq-tezos-of-ocaml",permalink:"/blog/tags/coq-tezos-of-ocaml"},{label:"Tezos",permalink:"/blog/tags/tezos"},{label:"coq-of-ocaml",permalink:"/blog/tags/coq-of-ocaml"}],readingTime:1.755,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83d\udc2b Latest blog posts on our formal verification effort on Tezos",tags:["coq-tezos-of-ocaml","Tezos","coq-of-ocaml"]},unlisted:!1,prevItem:{title:"\ud83e\udd84 Our current formal verification efforts",permalink:"/blog/2023/01/24/current-verification-efforts"},nextItem:{title:"\ud83d\udc2b Upgrade coq-of-ocaml to OCaml 4.14",permalink:"/blog/2022/06/23/upgrade-coq-of-ocaml-4.14"}},l={authorsImageUrls:[]},i=[];function f(o){const e={a:"a",p:"p",...(0,r.R)(),...o.components};return(0,a.jsxs)(e.p,{children:["Here we recall some blog articles that we have written since this summer, on the ",(0,a.jsx)(e.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/",children:"formal verification of the protocol of Tezos"}),". For this project, we are verifying a code base of around 100,000 lines of OCaml code. We automatically convert the OCaml code to the proof system Coq using the converter ",(0,a.jsx)(e.a,{href:"https://github.com/formal-land/coq-of-ocaml",children:"coq-of-ocaml"}),". We then apply various proof techniques to make sure that the protocol of Tezos does not contain bugs."]})}function m(o={}){const{wrapper:e}={...(0,r.R)(),...o.components};return e?(0,a.jsx)(e,{...o,children:(0,a.jsx)(f,{...o})}):f(o)}},8453:(o,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var a=t(6540);const r={},n=a.createContext(r);function s(o){const e=a.useContext(n);return a.useMemo((function(){return"function"==typeof o?o(e):{...e,...o}}),[e,o])}function c(o){let e;return e=o.disableParentContext?"function"==typeof o.components?o.components(r):o.components||r:s(o.components),a.createElement(n.Provider,{value:e},o.children)}}}]);