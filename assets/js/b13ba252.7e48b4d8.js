"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[1023],{90329:(t,o,e)=>{e.r(o),e.d(o,{assets:()=>l,contentTitle:()=>n,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=e(74848),r=e(28453);const s={title:"\ud83e\ude81 Coq of Solidity \u2013 part 4",tags:["formal verification","Coq","Solidity","Yul"],authors:[]},n=void 0,a={permalink:"/blog/2024/08/13/coq-of-solidity-4",source:"@site/blog/2024-08-13-coq-of-solidity-4.md",title:"\ud83e\ude81 Coq of Solidity \u2013 part 4",description:"In this blog post we explain how we specify and formally verify a whole ERC-20 smart contract using our tool coq-of-solidity, which translates Solidity code to the proof assistant Coq&nbsp;\ud83d\udc13.",date:"2024-08-13T00:00:00.000Z",formattedDate:"August 13, 2024",tags:[{label:"formal verification",permalink:"/blog/tags/formal-verification"},{label:"Coq",permalink:"/blog/tags/coq"},{label:"Solidity",permalink:"/blog/tags/solidity"},{label:"Yul",permalink:"/blog/tags/yul"}],readingTime:6.49,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\ude81 Coq of Solidity \u2013 part 4",tags:["formal verification","Coq","Solidity","Yul"],authors:[]},unlisted:!1,prevItem:{title:"\ud83e\udd80 Formal verification of the type checker of Sui \u2013 part 1",permalink:"/blog/2024/08/19/verification-move-sui-type-checker-1"},nextItem:{title:"\ud83e\ude81 Coq of Solidity \u2013 part 3",permalink:"/blog/2024/08/12/coq-of-solidity-3"}},l={authorsImageUrls:[]},c=[];function f(t){const o={a:"a",li:"li",p:"p",ul:"ul",...(0,r.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(o.p,{children:["In this blog post we explain how we specify and formally verify a whole ",(0,i.jsx)(o.a,{href:"https://github.com/ethereum/solidity,/blob/develop/test/libsolidity/semanticTests/various/erc20.sol",children:"ERC-20 smart contract"})," using our tool ",(0,i.jsx)(o.a,{href:"https://github.com/formal-land/coq-of-solidity",children:"coq-of-solidity"}),", which translates ",(0,i.jsx)(o.a,{href:"https://soliditylang.org/",children:"Solidity"})," code to the proof assistant ",(0,i.jsx)(o.a,{href:"https://coq.inria.fr/",children:"Coq\xa0\ud83d\udc13"}),"."]}),"\n",(0,i.jsx)(o.p,{children:"The proofs are still tedious for now, as there are around 1,000 lines of proofs for 100 lines of Solidity. We plan to automate this work as much as possible in the subsequent iterations of the tool. One good thing about the interactive theorem prover Coq is that we know we can never be stuck, so we can always make progress in our proof techniques and verify complex properties even if it takes time\xa0\u2728."}),"\n",(0,i.jsx)(o.p,{children:"Formal verification with an interactive proof assistant is the strongest way to verify programs since:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsx)(o.li,{children:"it covers all possible inputs and program states,"}),"\n",(0,i.jsx)(o.li,{children:"it checks any kind of properties."}),"\n"]})]})}function p(t={}){const{wrapper:o}={...(0,r.R)(),...t.components};return o?(0,i.jsx)(o,{...t,children:(0,i.jsx)(f,{...t})}):f(t)}},28453:(t,o,e)=>{e.d(o,{R:()=>n,x:()=>a});var i=e(96540);const r={},s=i.createContext(r);function n(t){const o=i.useContext(s);return i.useMemo((function(){return"function"==typeof t?t(o):{...o,...t}}),[o,t])}function a(t){let o;return o=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:n(t.components),i.createElement(s.Provider,{value:o},t.children)}}}]);