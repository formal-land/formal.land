"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[2458],{66277:(t,o,e)=>{e.r(o),e.d(o,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=e(74848),n=e(28453);const r={title:"\u2688 Verification of the Smoo.th library \u2013 2",tags:["Solidity","Yul","elliptic curves"],authors:[]},a=void 0,l={permalink:"/blog/2024/10/28/verification-smooth-library-2",source:"@site/blog/2024-10-28-verification-smooth-library-2.md",title:"\u2688 Verification of the Smoo.th library \u2013 2",description:"In this blog post, we detail the continuation of our work to formally verify the \u2688&nbsp;Smoo.th library, which is an optimized implementation of elliptic curve operations in Solidity. We use our tool coq-of-solidity, representing any Solidity code in the generic proof assistant \ud83d\udc13&nbsp;Coq, to verify the code for any execution path.",date:"2024-10-28T00:00:00.000Z",formattedDate:"October 28, 2024",tags:[{label:"Solidity",permalink:"/blog/tags/solidity"},{label:"Yul",permalink:"/blog/tags/yul"},{label:"elliptic curves",permalink:"/blog/tags/elliptic-curves"}],readingTime:6.86,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\u2688 Verification of the Smoo.th library \u2013 2",tags:["Solidity","Yul","elliptic curves"],authors:[]},unlisted:!1,prevItem:{title:"\u25fc\ufe0f A formal verification tool for Noir \u2013 1",permalink:"/blog/2024/11/01/tool-for-noir-1"},nextItem:{title:"\ud83c\udf32 What we bring you",permalink:"/blog/2024/10/22/what-we-bring-to-you"}},s={authorsImageUrls:[]},c=[];function h(t){const o={a:"a",p:"p",...(0,n.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(o.p,{children:["In this blog post, we detail the continuation of our work to formally verify the ",(0,i.jsx)(o.a,{href:"https://smoo.th/",children:"\u2688\xa0Smoo.th"})," library, which is an optimized implementation of elliptic curve operations in Solidity. We use our tool ",(0,i.jsx)(o.a,{href:"https://github.com/formal-land/coq-of-solidity",children:"coq-of-solidity"}),", representing any Solidity code in the generic proof assistant ",(0,i.jsx)(o.a,{href:"https://coq.inria.fr/",children:"\ud83d\udc13\xa0Coq"}),", to verify the code for any execution path."]}),"\n",(0,i.jsx)(o.p,{children:"In particular, we cover the changes we made to use unoptimized Yul code and how we made a functional representation of the loop to compute the most significant bit of the scalars."})]})}function u(t={}){const{wrapper:o}={...(0,n.R)(),...t.components};return o?(0,i.jsx)(o,{...t,children:(0,i.jsx)(h,{...t})}):h(t)}},28453:(t,o,e)=>{e.d(o,{R:()=>a,x:()=>l});var i=e(96540);const n={},r=i.createContext(n);function a(t){const o=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(o):{...o,...t}}),[o,t])}function l(t){let o;return o=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:a(t.components),i.createElement(r.Provider,{value:o},t.children)}}}]);