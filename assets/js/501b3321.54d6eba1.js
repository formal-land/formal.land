"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[2592],{48087:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=o(74848),r=o(28453);const i={title:"\ud83e\udd77 Formal verification of an OpenVM chip",tags:["zkVM","zero-knowledge","determinism"],authors:[]},a=void 0,s={permalink:"/blog/2025/08/13/verification-of-openvm-branch-eq",source:"@site/blog/2025-08-13-verification-of-openvm-branch-eq.md",title:"\ud83e\udd77 Formal verification of an OpenVM chip",description:"In this blog post, we present the formal verification of the determinism of the BranchEq circuit of the OpenVM zkVM. This zkVM provides an implementation of RISC-V with Plonky3, and appears to be very fast even on a CPU.",date:"2025-08-13T00:00:00.000Z",formattedDate:"August 13, 2025",tags:[{label:"zkVM",permalink:"/blog/tags/zk-vm"},{label:"zero-knowledge",permalink:"/blog/tags/zero-knowledge"},{label:"determinism",permalink:"/blog/tags/determinism"}],readingTime:8.615,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\udd77 Formal verification of an OpenVM chip",tags:["zkVM","zero-knowledge","determinism"],authors:[]},unlisted:!1,nextItem:{title:"\ud83e\udd84 What to verify in a zkVM",permalink:"/blog/2025/08/12/verification-of-zkvm"}},c={authorsImageUrls:[]},l=[];function h(e){const t={a:"a",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["In this blog post, we present the formal verification of the determinism of the ",(0,n.jsx)(t.a,{href:"https://github.com/openvm-org/openvm/blob/main/extensions/rv32im/circuit/src/branch_eq/core.rs",children:"BranchEq"})," circuit of the ",(0,n.jsx)(t.a,{href:"https://openvm.dev/",children:"OpenVM"})," zkVM. This zkVM provides an implementation of RISC-V with ",(0,n.jsx)(t.a,{href:"https://github.com/Plonky3/Plonky3",children:"Plonky3"}),", and appears to be very fast even on a CPU."]}),"\n",(0,n.jsxs)(t.p,{children:["We do our verification work using the formal verification system ",(0,n.jsx)(t.a,{href:"https://rocq-prover.org/",children:"Rocq"}),", showing the determinism on a model of the code. To see the other properties that can be verified, you can refer to our previous blog post ",(0,n.jsx)(t.a,{href:"/blog/2025/08/12/verification-of-zkvm",children:"\ud83e\udd84 What to verify in a zkVM"}),". We will see later how to make sure that the Rocq model corresponds to the actual Rust implementation of the circuit."]})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>s});var n=o(96540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);