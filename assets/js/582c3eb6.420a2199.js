"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[1061],{53617:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=t(74848),s=t(28453);const i={title:"\ud83e\ude81 Coq of Solidity \u2013 part 3",tags:["formal verification","Coq","Solidity","Yul"],authors:[]},r=void 0,a={permalink:"/blog/2024/08/12/coq-of-solidity-3",source:"@site/blog/2024-08-12-coq-of-solidity-3.md",title:"\ud83e\ude81 Coq of Solidity \u2013 part 3",description:"We continue to strengthen the security of smart contracts with our tool coq-of-solidity \ud83d\udee0\ufe0f. It checks for vulnerabilities or bugs in Solidity code. It uses formal verification with an interactive theorem prover (Coq&nbsp;\ud83d\udc13) to make sure that we cover:",date:"2024-08-12T00:00:00.000Z",formattedDate:"August 12, 2024",tags:[{label:"formal verification",permalink:"/blog/tags/formal-verification"},{label:"Coq",permalink:"/blog/tags/coq"},{label:"Solidity",permalink:"/blog/tags/solidity"},{label:"Yul",permalink:"/blog/tags/yul"}],readingTime:10.83,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\ude81 Coq of Solidity \u2013 part 3",tags:["formal verification","Coq","Solidity","Yul"],authors:[]},unlisted:!1,prevItem:{title:"\ud83e\ude81 Coq of Solidity \u2013 part 4",permalink:"/blog/2024/08/13/coq-of-solidity-4"},nextItem:{title:"\ud83e\ude81 Coq of Solidity \u2013 part 2",permalink:"/blog/2024/08/07/coq-of-solidity-2"}},l={authorsImageUrls:[]},c=[{value:"Functional specification",id:"functional-specification",level:2},{value:"Approve function",id:"approve-function",level:2},{value:"Equivalence",id:"equivalence",level:2},{value:"Proof of equivalence",id:"proof-of-equivalence",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["We continue to strengthen the security of smart contracts with our tool ",(0,o.jsx)(n.a,{href:"https://github.com/formal-land/coq-of-solidity",children:"coq-of-solidity"})," \ud83d\udee0\ufe0f. It checks for vulnerabilities or bugs in ",(0,o.jsx)(n.a,{href:"https://soliditylang.org/",children:"Solidity"})," code. It uses formal verification with an interactive theorem prover (",(0,o.jsx)(n.a,{href:"https://coq.inria.fr/",children:"Coq\xa0\ud83d\udc13"}),") to make sure that we cover:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"all possible user inputs/storage states, even if there are infinite possibilities,"}),"\n",(0,o.jsx)(n.li,{children:"for any security properties."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This is very important as a single bug can lead to the loss of millions of dollars in smart contracts, as we have regularly seen in the past, and we can never be sure that a human review of the code did not miss anything."}),"\n",(0,o.jsxs)(n.p,{children:["Our tool ",(0,o.jsx)(n.code,{children:"coq-of-solidity"})," is one of the only tools using an interactive theorem prover for Solidity, together with ",(0,o.jsx)(n.a,{href:"https://github.com/NethermindEth/Clear",children:"Clear"})," from ",(0,o.jsx)(n.a,{href:"https://www.nethermind.io/",children:"Nethermind"}),". This might be the most powerful approach to making code without bugs, as exemplified in this ",(0,o.jsx)(n.a,{href:"https://users.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf",children:"PLDI paper"})," comparing the reliability of various C compilers. They found numerous bugs in each compiler except in the ",(0,o.jsx)(n.a,{href:"https://github.com/AbsInt/CompCert",children:"formally verified one"}),"!"]}),"\n",(0,o.jsxs)(n.p,{children:["In this blog post we show how we functionally specify and verify the ",(0,o.jsx)(n.code,{children:"_approve"})," function of an ",(0,o.jsx)(n.a,{href:"https://github.com/ethereum/solidity/blob/develop/test/libsolidity/semanticTests/various/erc20.sol",children:"ERC-20 smart contract"}),". We will see how we prove that a refined version of the function is equivalent to the original one."]}),"\n",(0,o.jsx)(n.admonition,{title:"AlephZero",type:"success",children:(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["The development of ",(0,o.jsx)(n.code,{children:"coq-of-solidity"})," is made possible thanks to the ",(0,o.jsx)(n.a,{href:"https://alephzero.org/",children:"AlephZero"})," project. We thank the AlephZero Foundation for their support\xa0\ud83d\ude4f."]})})}),"\n",(0,o.jsx)("figure",{children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Ethereum in forest",src:t(68501).A+"",width:"1024",height:"1024"})})}),"\n",(0,o.jsx)(n.h2,{id:"functional-specification",children:"Functional specification"}),"\n",(0,o.jsxs)(n.p,{children:["Here is the ",(0,o.jsx)(n.code,{children:"_approve"})," function of the Solidity smart contract that we want to specify:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:'mapping (address => mapping (address => uint256)) private _allowances;\n\nfunction _approve(address owner, address spender, uint256 value) internal {\n    require(owner != address(0), "ERC20: approve from the zero address");\n    require(spender != address(0), "ERC20: approve to the zero address");\n\n    _allowances[owner][spender] = value;\n    emit Approval(owner, spender, value);\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["It modifies an item in the ",(0,o.jsx)(n.code,{children:"_allowances"})," map and emits an ",(0,o.jsx)(n.code,{children:"Approval"})," event after a few sanity checks. We will now write a functional specification of this function in Coq. The idea is to explain what this function is supposed to do describing its behavior with an idiomatic Coq code. This will be useful to make sure there are no mistakes in the smart contract, although here we have a very simple example. From the functional specification, we will also be able to check higher-level properties of the smart contract, such as the fact that the total amount of tokens is always conserved."]}),"\n",(0,o.jsxs)(n.p,{children:["Here is the Coq version of the ",(0,o.jsx)(n.code,{children:"_approve"})," function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"Module Storage.\n  Record t := {\n    allowances : Dict.t (Address.t * Address.t) U256.t;\n    (* other fields *)\n  }.\nEnd Storage.\n\nDefinition _approve (owner spender : Address.t) (value : U256.t) (s : Storage.t) :\n    Result.t Storage.t :=\n  if (owner =? 0) || (spender =? 0) then\n    revert_address_null\n  else\n    Result.Success s <| Storage.allowances :=\n      Dict.declare_or_assign s.(Storage.allowances) (owner, spender) value\n    |>.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It takes the same parameters as the Solidity code: ",(0,o.jsx)(n.code,{children:"owner"}),", ",(0,o.jsx)(n.code,{children:"spender"}),", ",(0,o.jsx)(n.code,{children:"value"}),", and the current state ",(0,o.jsx)(n.code,{children:"s"})," of the storage. It returns a ",(0,o.jsx)(n.code,{children:"Result.t Storage.t"})," type, which is either a ",(0,o.jsx)(n.code,{children:"Result.Success"})," with the new storage after the execution of the ",(0,o.jsx)(n.code,{children:"_approve"})," function, or a ",(0,o.jsx)(n.code,{children:"revert_address_null"})," if the ",(0,o.jsx)(n.code,{children:"owner"})," or ",(0,o.jsx)(n.code,{children:"spender"})," is the null address. To create the new storage, we use the corresponding Coq notation and function to update the ",(0,o.jsx)(n.code,{children:"_allowances"})," map."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["We ignore the ",(0,o.jsx)(n.code,{children:"emit"})," primitives for now."]})}),"\n",(0,o.jsxs)(n.p,{children:["Now let us show that, for any possible ",(0,o.jsx)(n.code,{children:"owner"}),", ",(0,o.jsx)(n.code,{children:"spender"}),", ",(0,o.jsx)(n.code,{children:"value"}),", and storage state ",(0,o.jsx)(n.code,{children:"s"}),", the ",(0,o.jsx)(n.code,{children:"_approve"})," function in Solidity will behave exactly as the Coq specification."]}),"\n",(0,o.jsx)(n.h2,{id:"approve-function",children:"Approve function"}),"\n",(0,o.jsxs)(n.p,{children:["Here is the Coq translation of the ",(0,o.jsx)(n.code,{children:"_approve"})," function as generated by ",(0,o.jsx)(n.code,{children:"coq-of-solidity"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"Definition fun_approve (var_owner : U256.t) (var_spender : U256.t) (var_value : U256.t) : M.t unit :=\n  let~ _1 := [[ and ~(| var_owner, (sub ~(| (shl ~(| 160, 1 |)), 1 |)) |) ]] in\n  do~ [[\n    M.if_unit (| iszero ~(| _1 |),\n      let~ memPtr := [[ mload ~(| 64 |) ]] in\n      do~ [[ mstore ~(| memPtr, (shl ~(| 229, 4594637 |)) |) ]] in\n      do~ [[ mstore ~(| (add ~(| memPtr, 4 |)), 32 |) ]] in\n      do~ [[ mstore ~(| (add ~(| memPtr, 36 |)), 36 |) ]] in\n      do~ [[ mstore ~(| (add ~(| memPtr, 68 |)), 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 |) ]] in\n      do~ [[ mstore ~(| (add ~(| memPtr, 100 |)), 0x7265737300000000000000000000000000000000000000000000000000000000 |) ]] in\n      do~ [[ revert ~(| memPtr, 132 |) ]] in\n      M.pure tt\n    |)\n  ]] in\n  let~ _2 := [[ and ~(| var_spender, (sub ~(| (shl ~(| 160, 1 |)), 1 |)) |) ]] in\n  do~ [[\n    M.if_unit (| iszero ~(| _2 |),\n      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in\n      do~ [[ mstore ~(| memPtr_1, (shl ~(| 229, 4594637 |)) |) ]] in\n      do~ [[ mstore ~(| (add ~(| memPtr_1, 4 |)), 32 |) ]] in\n      do~ [[ mstore ~(| (add ~(| memPtr_1, 36 |)), 34 |) ]] in\n      do~ [[ mstore ~(| (add ~(| memPtr_1, 68 |)), 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 |) ]] in\n      do~ [[ mstore ~(| (add ~(| memPtr_1, 100 |)), 0x7373000000000000000000000000000000000000000000000000000000000000 |) ]] in\n      do~ [[ revert ~(| memPtr_1, 132 |) ]] in\n      M.pure tt\n    |)\n  ]] in\n  do~ [[ mstore ~(| 0x00, _1 |) ]] in\n  do~ [[ mstore ~(| 0x20, 0x01 |) ]] in\n  let~ dataSlot := [[ keccak256 ~(| 0x00, 0x40 |) ]] in\n  let~ dataSlot_1 := [[ 0 ]] in\n  do~ [[ mstore ~(| 0, _2 |) ]] in\n  do~ [[ mstore ~(| 0x20, dataSlot |) ]] in\n  let~ dataSlot_1 := [[ keccak256 ~(| 0, 0x40 |) ]] in\n  do~ [[ sstore ~(| dataSlot_1, var_value |) ]] in\n  let~ _3 := [[ mload ~(| 0x40 |) ]] in\n  do~ [[ mstore ~(| _3, var_value |) ]] in\n  do~ [[ log3 ~(| _3, 0x20, 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, _1, _2 |) ]] in\n  M.pure tt.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We plug into the Solidity compiler and translate the intermediate representation ",(0,o.jsx)(n.a,{href:"https://docs.soliditylang.org/en/latest/yul.html",children:"Yul"})," that ",(0,o.jsx)(n.code,{children:"solc"})," uses to generate EVM bytecode. We automatically refine the Yul generated by the Solidity compiler but for now this refinement is limited."]}),"\n",(0,o.jsxs)(n.p,{children:["The two ",(0,o.jsx)(n.code,{children:"M.if_unit"})," at the beginning correspond to the ",(0,o.jsx)(n.code,{children:"require"})," statements in the Solidity code. The ",(0,o.jsx)(n.code,{children:"revert"})," statements are used to return an error message to the caller. The ",(0,o.jsx)(n.code,{children:"mstore"})," and ",(0,o.jsx)(n.code,{children:"sstore"})," functions are used to store values in the memory and the storage of the EVM. The ",(0,o.jsx)(n.code,{children:"keccak256"})," function encodes the storage addresses to access the ",(0,o.jsx)(n.code,{children:"_allowances"})," map. The ",(0,o.jsx)(n.code,{children:"log3"})," function is used to emit an event at the end."]}),"\n",(0,o.jsxs)(n.p,{children:["This representation of the ",(0,o.jsx)(n.code,{children:"_approve"})," function is very verbose as it corresponds exactly to what the source code does and contains a lot of implementation details. Our goal now is to show that this version is equivalent to the functional specification that we wrote by hand."]}),"\n",(0,o.jsx)(n.h2,{id:"equivalence",children:"Equivalence"}),"\n",(0,o.jsx)(n.p,{children:"We express that the functional specification is equivalent to the original one with this lemma:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"Lemma run_fun_approve codes environment state\n    (owner spender : Address.t) (value : U256.t) (s : erc20.Storage.t)\n    (mem_0 mem_1 mem_3 mem_4 : U256.t)\n    (H_owner : Address.Valid.t owner)\n    (H_spender : Address.Valid.t spender) :\n  let memoryguard := 0x80 in\n  let memory_start :=\n    [mem_0; mem_1; memoryguard; mem_3; mem_4] in\n  let state_start :=\n    make_state environment state memory_start (SimulatedStorage.of_erc20_state s) in\n  let output :=\n    erc20._approve owner spender value s in\n  let memory_end :=\n    [spender; erc20.keccak256_tuple2 owner 1; memoryguard; mem_3; value] in\n  let state_end :=\n    match output with\n    | erc20.Result.Revert _ _ => None\n    | erc20.Result.Success s =>\n      Some (make_state environment state memory_end (SimulatedStorage.of_erc20_state s))\n    end in\n  {{? codes, environment, Some state_start |\n    ERC20_403.ERC20_403_deployed.fun_approve owner spender value \u21d3\n    match output with\n    | erc20.Result.Revert p s => Result.Revert p s\n    | erc20.Result.Success _ => Result.Ok tt\n    end\n  | state_end ?}}.\n"})}),"\n",(0,o.jsx)(n.p,{children:"This lemma of equivalence requires some parameters:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["an initial ",(0,o.jsx)(n.code,{children:"codes"}),", ",(0,o.jsx)(n.code,{children:"environment"}),", and ",(0,o.jsx)(n.code,{children:"state"})," values, that describe the state of the blockchain before the execution of the ",(0,o.jsx)(n.code,{children:"_approve"})," function,"]}),"\n",(0,o.jsxs)(n.li,{children:["a ",(0,o.jsx)(n.code,{children:"memoryguard"})," value that gives a memory zone that we are safe to use,"]}),"\n",(0,o.jsxs)(n.li,{children:["some ",(0,o.jsx)(n.code,{children:"mem_i"})," variables, as we do not know the exact values of the memory slots before the execution of the function,"]}),"\n",(0,o.jsxs)(n.li,{children:["an ",(0,o.jsx)(n.code,{children:"owner"}),", ",(0,o.jsx)(n.code,{children:"spender"}),", and ",(0,o.jsx)(n.code,{children:"value"})," that are the parameters of the ",(0,o.jsx)(n.code,{children:"_approve"})," function,"]}),"\n",(0,o.jsxs)(n.li,{children:["an ",(0,o.jsx)(n.code,{children:"s"})," that is the state of storage of the smart contract before the execution of the ",(0,o.jsx)(n.code,{children:"_approve"})," function,"]}),"\n",(0,o.jsxs)(n.li,{children:["an ",(0,o.jsx)(n.code,{children:"H_owner"})," and ",(0,o.jsx)(n.code,{children:"H_spender"})," proofs that the ",(0,o.jsx)(n.code,{children:"owner"})," and ",(0,o.jsx)(n.code,{children:"spender"})," are valid addresses. These two proofs are required to execute the function as expected and always available, thanks to runtime checks made at the entrypoints of the smart contract."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The lemma will hold for any possible values of the parameters above, even if there are infinite possibilities. This is the power of formal verification: we can prove that our smart contract is correct for all possible inputs and states."}),"\n",(0,o.jsx)(n.p,{children:"The core statement uses the predicate:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"{{? codes, environment, start_state |\n  original_code \u21d3\n  refined_code\n| end_state ?}}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It says that some ",(0,o.jsx)(n.code,{children:"original_code"})," executed in the ",(0,o.jsx)(n.code,{children:"start_state"})," environment will give the same output as the ",(0,o.jsx)(n.code,{children:"refined_code"})," and will result in the final state ",(0,o.jsx)(n.code,{children:"end_state"}),". The state is an option type: either ",(0,o.jsx)(n.code,{children:"Some"})," state or ",(0,o.jsx)(n.code,{children:"None"})," if the execution reverted. That way we do not have to deal with describing the state after a contract revert, that will reset the storage anyways."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The statement of equivalence is relatively verbose so there could be mistakes in the way it is stated. This is not really an issue, as the ",(0,o.jsx)(n.code,{children:"_approve"})," function is an intermediate function, so the only statement that really matters is the one on the main function of the contract that dispatches to the relevant entrypoint according to the payload of the transaction. There could also be mistakes there, but perhaps we can automatically generate this statement from the Solidity code."]})}),"\n",(0,o.jsx)(n.h2,{id:"proof-of-equivalence",children:"Proof of equivalence"}),"\n",(0,o.jsx)(n.p,{children:"The way we write the proof is interesting. We use Coq as a symbolic debugger, where we execute both the original code and the functional specification until we reach the end of execution for all the branches, always with the same result."}),"\n",(0,o.jsx)(n.p,{children:"Here is an example of a debugging step (in the proof mode of Coq):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"{{?codes, environment,\nSome\n  (make_state environment state [spender; erc20.keccak256_tuple2 owner 1; 128; mem_3; mem_4]\n     [IsStorable.IMap.(IsStorable.to_storable_value) s.(erc20.Storage.balances);\n      StorableValue.Map2\n        (Dict.declare_or_assign s.(erc20.Storage.allowances) (owner, spender) value);\n      StorableValue.U256 s.(erc20.Storage.total_supply)])\n|\n  // highlight-next-line\n  The original code here:\n  do~ call (Stdlib.mstore 128 value)\n  in (do~ call\n            (Stdlib.log3 128 32\n               63486140976153616755203102783360879283472101686154884697241723088393386309925\n               owner spender) in LowM.Pure (Result.Ok tt)) \u21d3\n  // highlight-next-line\n  The functional specification here:\n  Result.Ok tt\n| Some\n    (make_state environment state [spender; erc20.keccak256_tuple2 owner 1; 128; mem_3; value]\n       (SimulatedStorage.of_erc20_state\n          s<|erc20.Storage.allowances:= Dict.declare_or_assign s.(erc20.Storage.allowances)\n                                          (owner, spender) value|>))?}}\n"})}),"\n",(0,o.jsx)(n.p,{children:"On the original code side we can recognize:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"do~ [[ mstore ~(| _3, var_value |) ]] in\ndo~ [[ log3 ~(| _3, 0x20, 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, _1, _2 |) ]] in\nM.pure tt\n"})}),"\n",(0,o.jsxs)(n.p,{children:["that corresponds to the end of the execution of the ",(0,o.jsx)(n.code,{children:"_approve"})," function. On the functional specification, we have:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"Result.Ok tt\n"})}),"\n",(0,o.jsxs)(n.p,{children:["that ends the execution successfully but does not return anything. This is because we ignore the ",(0,o.jsx)(n.code,{children:"emit"})," operation, translated as a ",(0,o.jsx)(n.code,{children:"log3"})," Yul primitive. We also ignore the ",(0,o.jsx)(n.code,{children:"mstore"})," call as it is only used to fill information for the ",(0,o.jsx)(n.code,{children:"log3"})," call."]}),"\n",(0,o.jsx)(n.p,{children:"Here are the various commands to step through the code, encoded as Coq tactics:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"p"}),": final ",(0,o.jsx)(n.strong,{children:"P"}),"ure expression"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"pn"}),": final ",(0,o.jsx)(n.strong,{children:"P"}),"ure expression ignoring the resulting state with a ",(0,o.jsx)(n.strong,{children:"N"}),"one (for a revert)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"pe"}),": final ",(0,o.jsx)(n.strong,{children:"P"}),"ure expression with non-trivial ",(0,o.jsx)(n.strong,{children:"E"}),"quality of results"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"pr"}),": Yul ",(0,o.jsx)(n.strong,{children:"PR"}),"imitive"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"prn"}),": Yul ",(0,o.jsx)(n.strong,{children:"PR"}),"imitive ignoring the resulting state with a ",(0,o.jsx)(n.strong,{children:"N"}),"one"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"l"}),": step in a ",(0,o.jsx)(n.strong,{children:"L"}),"et"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"lu"}),": step in a ",(0,o.jsx)(n.strong,{children:"L"}),"et by ",(0,o.jsx)(n.strong,{children:"U"}),"nfolding"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"c"}),": step in a function ",(0,o.jsx)(n.strong,{children:"C"}),"all"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"cu"}),": step in a function ",(0,o.jsx)(n.strong,{children:"C"}),"all by ",(0,o.jsx)(n.strong,{children:"U"}),"nfolding"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"s"}),": ",(0,o.jsx)(n.strong,{children:"S"}),"implify the goal"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["These commands verify that the two programs are equivalent as we step through them. As a reference, the proof is in ",(0,o.jsx)(n.a,{href:"https://github.com/formal-land/coq-of-solidity/blob/guillaume-claret%40verify-erc20/CoqOfSolidity/proofs/ERC20_functional.v",children:"CoqOfSolidity/proofs/ERC20_functional.v"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"Proof.\n  simpl.\n  unfold ERC20_403.ERC20_403_deployed.fun_approve, erc20._approve.\n  l. {\n    now apply run_is_non_null_address.\n  }\n  unfold Stdlib.Pure.iszero.\n  lu.\n  c; [p|].\n  s.\n  unfold Stdlib.Pure.iszero.\n  destruct (owner =? 0); s. {\n    change (true || _) with true; s.\n    lu; c. {\n      apply_run_mload.\n    }\n    repeat (\n      lu ||\n      cu ||\n      (prn; intro) ||\n      s ||\n      p\n    ).\n  }\n  l. {\n    now apply run_is_non_null_address.\n  }\n  lu.\n  c; [p|]; s.\n  unfold Stdlib.Pure.iszero.\n  change (false || ?e) with e; s.\n  destruct (spender =? 0); s. {\n    lu; c. {\n      apply_run_mload.\n    }\n    repeat (\n      lu ||\n      cu ||\n      (prn; intro) ||\n      s ||\n      p\n    ).\n  }\n  lu; c. {\n    apply_run_mstore.\n  }\n  CanonizeState.execute.\n  lu; c. {\n    apply_run_mstore.\n  }\n  CanonizeState.execute.\n  lu; c. {\n    apply_run_keccak256_tuple2.\n  }\n  lu.\n  lu; c. {\n    apply_run_mstore.\n  }\n  CanonizeState.execute.\n  lu; c. {\n    apply_run_mstore.\n  }\n  CanonizeState.execute.\n  lu; c. {\n    apply_run_keccak256_tuple2.\n  }\n  lu; c. {\n    apply_run_sstore_map2_u256.\n  }\n  CanonizeState.execute.\n  lu; c. {\n    apply_run_mload.\n  }\n  s.\n  lu; c. {\n    apply_run_mstore.\n  }\n  CanonizeState.execute.\n  lu; c. {\n    p.\n  }\n  p.\nQed.\n"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Get started",type:"success",children:[(0,o.jsxs)(n.p,{children:["To audit your smart contracts and make sure they contain no bugs, contact us at\xa0",(0,o.jsx)(n.a,{href:"mailto:contact@formal.land",children:"\xa0\ud83d\udce7contact@formal.land"}),"."]}),(0,o.jsx)(n.p,{children:"We refund our work in case we missed any high/critical severity bugs."})]}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:["We have presented how to functionally specify a function with ",(0,o.jsx)(n.code,{children:"coq-of-solidity"}),". In the next blog post we will see how to extend this proof and specification to the entire ERC-20 smart contract."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},68501:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/ethereum-in-forest-a697841f62759540c5eb8fdc32776e51.webp"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);