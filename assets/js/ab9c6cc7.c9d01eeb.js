"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[697],{1818:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=o(4848),l=o(8453);const r={id:"run",title:"Run"},s=void 0,i={id:"tools/coq-of-ocaml/run",title:"Run",description:"coq-of-ocaml translates the OCaml files one by one. It uses Merlin to get the typing environment of each file. Thus you should first have a project which works with Merlin. This is generally the case for a project compiled with dune.",source:"@site/docs/tools/coq-of-ocaml/run.md",sourceDirName:"tools/coq-of-ocaml",slug:"/tools/coq-of-ocaml/run",permalink:"/docs/tools/coq-of-ocaml/run",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"run",title:"Run"},sidebar:"sidebar",previous:{title:"Install",permalink:"/docs/tools/coq-of-ocaml/install"},next:{title:"Cookbook",permalink:"/docs/tools/coq-of-ocaml/cookbook"}},a={},c=[{value:"Minimal example",id:"minimal-example",level:2},{value:"Command line arguments",id:"command-line-arguments",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"coq-of-ocaml"})," translates the OCaml files one by one. It uses ",(0,t.jsx)(n.a,{href:"https://github.com/ocaml/merlin",children:"Merlin"})," to get the typing environment of each file. Thus you should first have a project which works with Merlin. This is generally the case for a project compiled with ",(0,t.jsx)(n.a,{href:"https://github.com/ocaml/dune",children:"dune"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"minimal-example",children:"Minimal example"}),"\n",(0,t.jsxs)(n.p,{children:["Create a file ",(0,t.jsx)(n.code,{children:"example.ml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"type 'a tree =\n  | Leaf of 'a\n  | Node of 'a tree * 'a tree\n\nlet rec sum tree =\n  match tree with\n  | Leaf n -> n\n  | Node (tree1, tree2) -> sum tree1 + sum tree2\n"})}),"\n",(0,t.jsx)(n.p,{children:"Run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"coq-of-ocaml example.ml\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You should get a file ",(0,t.jsx)(n.code,{children:"Example.v"})," representing the corresponding version in Coq:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-coq",children:"Require Import CoqOfOCaml.CoqOfOCaml.\nRequire Import CoqOfOCaml.Settings.\n\nInductive tree (a : Set) : Set :=\n| Leaf : a -> tree a\n| Node : tree a -> tree a -> tree a.\n\nArguments Leaf {_}.\nArguments Node {_}.\n\nFixpoint sum (tree : tree Z) : Z :=\n  match tree with\n  | Leaf n => n\n  | Node tree1 tree2 => Z.add (sum tree1) (sum tree2)\n  end.\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"command-line-arguments",children:"Command line arguments"}),"\n",(0,t.jsx)(n.p,{children:"The general usage pattern is the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"coq-of-ocaml [options] file.ml\n"})}),"\n",(0,t.jsx)(n.p,{children:"The options are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-output file"}),": specify the name of the Coq ",(0,t.jsx)(n.code,{children:".v"})," file to output (by default the capitalized OCaml file name with a ",(0,t.jsx)(n.code,{children:".v"})," extension)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-json-mode"}),": produce the list of error messages in JSON format; useful for post-processing"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var t=o(6540);const l={},r=t.createContext(l);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);