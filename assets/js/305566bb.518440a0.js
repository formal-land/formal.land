"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[3956],{26332:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(74848),r=n(28453);const i={title:"\ud83e\udd80 Typing and naming of Rust code in Rocq (1/3)",tags:["Rust","links","simulations"],authors:[]},s=void 0,a={permalink:"/blog/2025/01/30/links-for-rust-in-rocq",source:"@site/blog/2025-01-30-links-for-rust-in-rocq.md",title:"\ud83e\udd80 Typing and naming of Rust code in Rocq (1/3)",description:"In this article we show how we re-build the type and naming information of \ud83e\udd80&nbsp;Rust code in &nbsp;Rocq/Coq, the formal verification system we use. A challenge is to be able to represent arbitrary Rust programs, including the standard library of Rust and the whole of Revm, a virtual machine to run EVM programs.",date:"2025-01-30T00:00:00.000Z",formattedDate:"January 30, 2025",tags:[{label:"Rust",permalink:"/blog/tags/rust"},{label:"links",permalink:"/blog/tags/links"},{label:"simulations",permalink:"/blog/tags/simulations"}],readingTime:7.485,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\udd80 Typing and naming of Rust code in Rocq (1/3)",tags:["Rust","links","simulations"],authors:[]},unlisted:!1,prevItem:{title:"\ud83e\udd80 Typing and naming of Rust code in Rocq (2/3)",permalink:"/blog/2025/02/05/links-for-rust-in-rocq-2"},nextItem:{title:"\ud83e\udd16 Designing a coding assistant for Rocq",permalink:"/blog/2025/01/21/designing-a-coding-assistant-for-rocq"}},l={authorsImageUrls:[]},c=[];function u(t){const e={a:"a",p:"p",...(0,r.R)(),...t.components};return(0,o.jsxs)(e.p,{children:["In this article we show how we re-build the type and naming information of ",(0,o.jsx)(e.a,{href:"https://www.rust-lang.org/",children:"\ud83e\udd80\xa0Rust"})," code in ",(0,o.jsxs)(e.a,{href:"https://rocq-prover.org/",children:[(0,o.jsx)("img",{src:"https://raw.githubusercontent.com/coq/rocq-prover.org/refs/heads/main/rocq-id/logos/SVG/icon-rocq-orange.svg",height:"18px"}),"\xa0Rocq/Coq"]}),", the formal verification system we use. A challenge is to be able to represent arbitrary Rust programs, including the standard library of Rust and the whole of ",(0,o.jsx)(e.a,{href:"https://github.com/bluealloy/revm",children:"Revm"}),", a virtual machine to run ",(0,o.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Ethereum#Virtual_machine",children:"EVM"})," programs."]})}function m(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(u,{...t})}):u(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>a});var o=n(96540);const r={},i=o.createContext(r);function s(t){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),o.createElement(i.Provider,{value:e},t.children)}}}]);